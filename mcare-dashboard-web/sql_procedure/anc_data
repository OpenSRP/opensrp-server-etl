CREATE OR REPLACE FUNCTION anc_data(filterArray text[])
RETURNS TABLE(
	ancScheduleType text
	, month float
	, schedulePercentage float
			 )
AS $$
DECLARE
i text; 
ancScheduleTypes  text[] := '{"pending", "completed", "expired"}';
									filterString text := '';
  completeCountFilterString text := '';
  expiredConditionString text := '';
  div text := '';
  dis text := '';
  upa text := '';
  uni text := '';
  war text := '';
  sub text := '';
  mau text := '';
  pro text := '';
  years text := '';
BEGIN
  /*Search Filter Assignments*/
  div := upper(filterArray[1]);
  dis := upper(filterArray[2]);
  upa := filterArray[3];
  uni := filterArray[4];
  war := filterArray[5];
  sub := filterArray[6];
  mau := filterArray[7];
  pro := filterArray[8];
  years := filterArray[9];
  /*Generating Temporary Table to populate aggregated values TEMPORARY*/
  DROP TABLE IF EXISTS helper_table;
  CREATE TEMPORARY TABLE IF NOT EXISTS helper_table (
   ancScheduleType text
   , month float
   , schedulePercentage float
  );

  DROP TABLE IF EXISTS table_anc_schedule_type_percentage;
  CREATE TEMPORARY TABLE IF NOT EXISTS table_anc_schedule_type_percentage(
   ancScheduleType text
   , month float
   , schedulePercentage float
  );

   FOREACH i IN ARRAY ancScheduleTypes
   LOOP 
   RAISE NOTICE '%', i;
   INSERT INTO helper_table (ancScheduleType , month)
   VALUES  (i, 1), (i, 2), (i, 3), (i, 4), (i, 5), (i, 6), (i, 7), (i, 8), (i, 9), (i, 10), (i, 11), (i, 12);
   END LOOP;

update helper_table
   set schedulePercentage = anc2.schedulePercentage 
 from
   (select date_part('month', date(a.start_date)),count(date_part('month', date(a.start_date)))
     from "viewANCPNCNotSubmitted" a
     where date_part('year', date(a.start_date)) = 2018
	 and visit_code like '%ancrv_%'
     group by  date_part('month', date(a.start_date))
     order by date_part('month', date(a.start_date)) asc) 
as anc2(month, schedulePercentage)
   where helper_table.ancScheduleType = 'pending'
   and helper_table.month = anc2.month;

						
/*completed scheudule counts*/
update helper_table
   set schedulePercentage = anc2.schedulePercentage 
 from
   (select date_part('month', date(a.received_time)),count(date_part('month', date(a.received_time)))
     from "viewANCSubmitted" a
     where date_part('year', date(a.received_time)) = 2018
     group by  date_part('month', date(a.received_time))
     order by date_part('month', date(a.received_time)) asc) 
as anc2(month, schedulePercentage)
   where helper_table.ancScheduleType = 'completed'
   and helper_table.month = anc2.month;

/* expired schedules*/
	update helper_table
   set schedulePercentage = anc2.schedulePercentage 
 from
   (select date_part('month', date(a.start_date)),count(date_part('month', date(a.start_date)))
     from "viewANCPNCNotSubmitted" a
     where date_part('year', date(a.start_date)) = 2018
     and alert_status = 'urgent' and expiry_date < current_date
     group by  date_part('month', date(a.start_date))
     order by date_part('month', date(a.start_date)) asc) 
as anc2(month, schedulePercentage)
   where helper_table.ancScheduleType = 'completed'
   and helper_table.month = anc2.month;
						
 
   insert into table_anc_schedule_type_percentage(ancScheduleType, month, schedulePercentage)
   select ht.ancScheduleType, ht.month, (SELECT round(((ht.schedulePercentage :: numeric)/(70 :: numeric)) * 100, 2))
   from helper_table ht;

   /*Return whole dashboard_data_count data*/
   RETURN QUERY SELECT ttable.ancScheduleType
	   , ttable.month
       , coalesce(ttable.schedulePercentage, 0) as schedulePercentage
       from table_anc_schedule_type_percentage ttable
		order by ancScheduleType, month;
END;
$$ LANGUAGE plpgsql;

select * from anc_data(array['','','','','','','','','2018']);
																						   
																						   
																						   
